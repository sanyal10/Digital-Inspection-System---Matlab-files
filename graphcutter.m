im = imread("14885350686496464.jpg");
info = imfinfo('14885350686496464.jpg');

[BW,maskedImage] = segmentImage(im);
imshow(maskedImage);

function [BW,maskedImage] = segmentImage(RGB)
%segmentImage Segment image using auto-generated code from Image Segmenter app
%  [BW,MASKEDIMAGE] = segmentImage(RGB) segments image RGB using
%  auto-generated code from the Image Segmenter app. The final segmentation
%  is returned in BW, and a masked image is returned in MASKEDIMAGE.

% Auto-generated by imageSegmenter app on 02-Oct-2023
%----------------------------------------------------


% Convert RGB image into L*a*b* color space.
X = rgb2lab(RGB);

% Graph cut
foregroundInd = [2172 2402 2403 2622 2852 2856 3972 4422 4652 6002 6452 7572 9602 10272 10502 12302 12527 14102 14103 14327 14772 15453 15903 16127 17477 17703 17927 18153 18377 19053 19504 19954 20174 20177 20404 21304 21754 21977 22204 23327 24004 25356 25577 25806 26023 27156 27377 27606 28956 29177 29627 29856 30756 30975 31206 31656 33006 33225 33456 33460 33675 34806 35256 35706 35925 37056 37506 38175 38857 39075 39307 39525 40657 40874 41774 42457 42673 42907 43123 43357 43573 43807 44023 44257 44473 44922 44923 45365 45372 45607 47172 47407 47620 48520 48757 48970 49207 49420 51008 51219 52358 52808 53258 54819 55058 55060 55711 55960 56410 56860 57069 57310 58210 58660 58869 59110 59319 60207 60460 60669 60910 61119 61360 61810 62260 62469 62710 62919 63369 64060 64510 64705 64719 64960 65860 66069 66519 66760 66969 67210 67418 67660 67868 68560 68768 69218 69910 70118 70360 70568 71710 71918 72368 72610 72816 72818 73060 73266 73510 73716 74410 74616 75066 75760 75966 76210 76211 76416 76661 77766 78011 78216 78461 78666 79361 79566 79811 80016 80261 81611 81816 82061 82266 82511 83411 83861 84311 84514 85211 85661 85864 86111 86561 87461 87664 87911 88114 88361 88564 89464 89711 90161 90364 91061 91264 91511 91714 91961 91962 92164 92412 93312 93313 93514 93763 93964 94213 94414 95314 95563 95764 96013 96214 97363 97813 98263 99163 99613 99814 100063 100963 101413 101863 102065 103663 103866 104563 105463 106813 107263 107713 108613 109268 109513 109718 109963 110413 111068 111314 112664 113114 113564 114464 114914 115364 115814 116264 116919 117164 117614 118964 119414 120314 120520 120764 121214 121664 122114 122564 123014 123220 123464 123670 124364 124572 124814 126164 126372 126614 127064 127514 127964 128414 128623 128864 129314 130664 130874 132014 132464 133124 133364 134264 134474 134714 136064 136514 136964 137864 138074 138314 138764 138974 139214 139664 140097 140114 140544 140564 140994 141006 141007 141008 141014 141225 141894 141908 141910 141911 141912 141913 141914 142343 142575 142793 143025 143693 144141 144590 144591 145939 146175 146386 146387 146389 146835 147734 147735 147975 148184 149532 149981 149982 150430 150431 150677 151777 151780 152224 152226 152227 152673 153571 153572 154021 154277 155369 156268 156527 158068 158777 158968 159418 159677 159868 161218 162118 162377 163018 164819 165719 165977 167519 169127 169319 169577 169769 170027 170219 171377 171571 171827 173371 173627 174721 174977 175171 175427 176071 176521 176972 177224 177422 178772 179222 179473 180572 180822 181022 181472 181922 182822 183072 184622 185072 185322 185522 186422 186872 187322 187772 188672 189122 190472 190473 191373 192522 192723 193173 193872 194974 195426 196326 196776 197022 198126 199026 199272 199722 201072 201276 202176 202626 202872 203976 204426 204876 205122 205776 206022 206226 206676 206677 206922 207127 208027 208270 208477 208478 208928 210728 210730 211630 212080 212530 212770 212980 213430 213431 213881 214331 214781 215681 216581 216819 217931 218381 219069 219281 219731 220181 220631 221531 221981 222431 223331 223781 224469 224681 224779 224919 225368 225582 226032 226269 227382 227832 228282 229632 230082 230084 230768 231434 231884 232334 233234 233684 233916 235034 235484 235934 236834 237734 238184 239084 239085 239535 239765 239987 240887 241115 241337 241787 241789 242239 242689 243139 243589 244039 244264 244939 245389 245614 246739 247189 247414 248536 249436 249886 250112 250785 251012 251235 251685 251912 253935 254611 254834 255511 255734 256634 256861 257084 257534 258884 259334 259560 259784 260010 260234 260460 260684 261134 262484 262934 263384 264282 265182 265409 266082 266532 266982 268332 268334 268784 269234 270134 270135 270585 270587 271037 271937 271939 272159 272839 273059 273289 273740 274190 274640 275091 276441 276891 277109 277791 278009 278691 278909 279359 280709 283641 286107 286339 288357 292407 294207 296239 296457 299389 300506 301856 302539 303206 305689 305905 310405 312205 313105 314005 314905 315355 317603 319403 320753 321653 323003 323903 324803 328648 328649 328652 328654 328656 328660 328662 328664 328666 328670 328671 328675 328676 328677 328678 328679 328680 328682 328683 328684 328852 329136 329137 329139 329140 329141 329142 329592 329593 330943 333192 333642 333802 334541 334702 335152 336791 336952 337240 338140 339039 339202 340389 340552 340839 341001 341289 342189 342639 342640 343090 344890 345051 346240 346690 348649 348940 349099 350449 350740 350899 351349 351640 352540 354048 354340 354790 356297 357040 357940 358547 360190 360346 362439 362596 363789 364239 364396 364846 365746 366039 366196 366489 367389 367546 367839 368289 368896 369189 369639 369796 370244 370539 371439 372494 373689 375644 376390 377290 377444 379694 379991 380144 380891 381944 383294 383592 384045 384945 385094 385393 385395 385544 385845 385847 385994 387197 387794 388547 388997 390797 390944 391247 391697 391844 393194 393499 393644 393949 394544 394849 395893 397099 397549 397693 398593 399349 400249 400392 402949 403092 404299 404892 405199 405792 406099 407592 408799 408942 409247 409392 410147 410292 411497 411947 412092 412396 412397 412846 412992 413296 414342 414646 415996 416446 417039 417347 417797 418247 418839 419289 420639 421088 422438 423197 424097 425138 425897 426038 426347 426488 426797 ];
backgroundInd
L = superpixels(X,3691,'IsInputLab',true);

% Convert L*a*b* range to [0 1]
scaledX = prepLab(X);
BW = lazysnapping(scaledX,L,foregroundInd,backgroundInd);

% Create masked image.
maskedImage = RGB;
maskedImage(repmat(~BW,[1 1 3])) = 0;
end

function out = prepLab(in)

% Convert L*a*b* image to range [0,1]
out = in;
out(:,:,1) = in(:,:,1) / 100;  % L range is [0 100].
out(:,:,2) = (in(:,:,2) + 86.1827) / 184.4170;  % a* range is [-86.1827,98.2343].
out(:,:,3) = (in(:,:,3) + 107.8602) / 202.3382;  % b* range is [-107.8602,94.4780].

end
